#Использовать fs
#Использовать json
#Использовать logos
#Использовать "./internal"

Перем ИндексПлагиновПоПриоритету;
Перем ПлагиныПоПриоритету;
Перем КаталогПлагинов;

#Область Экспортные_методы

// Возвращает плагины
//
//  Возвращаемое значение:
//   Массив - набор плагинов отсортированных по приоритету 
//
Функция ПолучитьПлагины() Экспорт
	Возврат ПлагиныПоПриоритету;
КонецФункции

// Возвращает плагин
//
// Параметры:
//  ИмяПлагина - имя требуемого плагина
//
// Возвращаемое значение:
//  Произвольный объект - объект плагина
//
Функция ПолучитьПлагинПоИмени(ИмяПлагина) Экспорт
	
	ИндексПлагина = ИндексПлагиновПоПриоритету[ИмяПлагина];
	
	Если ИндексПлагина = Неопределено Тогда
		Плагин = Неопределено;
	Иначе
		Плагин = ПлагиныПоПриоритету[ИндексПлагина];
	КонецЕсли;

	Возврат Плагин;

КонецФункции

// Выполняет загрузку плагинов из каталога
//
Процедура ЗагрузитьПлагины() Экспорт

	ТекущийЗагрузчикПлагинов = Новый ЗагрузчикПлагинов(КаталогПлагинов);
	ТекущийЗагрузчикПлагинов.ЗагрузитьПлагины();
	ИндексПлагинов = ТекущийЗагрузчикПлагинов.ИндексПлагинов();
	ЗаполнитьПлагиныПоПриоритету(ИндексПлагинов);

КонецПроцедуры

// Создает и возвращает новый МенеджерПодписок для текущего индекса плагинов
//
//  Возвращаемое значение:
//   Объект.МенеджерПодписок - ссылка на новый объект класса <МенеджерПодписок>
//
Функция НовыйМенеджерПодписок() Экспорт
	
	Возврат Новый МенеджерПодписок(ПлагиныПоПриоритету);

КонецФункции

// Производит отключение массива плагинов
//
// Параметры:
//   МассивПлагинов - Массив - Элементы типа Строка, имена плагинов
//
Процедура ОтключитьПлагины(МассивПлагинов) Экспорт
	
	Для каждого ОтключаемыйПлагин Из МассивПлагинов Цикл
		
		ИндексПлагина = ИндексПлагиновПоПриоритету[ОтключаемыйПлагин];

		Если ИндексПлагина = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Плагин = ПлагиныПоПриоритету[ИндексПлагина];
		Плагин.Отключить();

	КонецЦикла;

КонецПроцедуры

// Включает набор плагинов
//
// Параметры:
//   МассивПлагинов - Массив, Соответствие - набор наименований плагинов
//
Процедура ВключитьПлагины(МассивПлагинов) Экспорт
	
	Для каждого ВключаемыеПлагин Из МассивПлагинов Цикл
		
		Если ТипЗнч(ВключаемыеПлагин) = Тип("Строка") Тогда
			ВключитьПлагин(ВключаемыеПлагин);
		Иначе
			ВключитьПлагин(ВключаемыеПлагин.Ключ);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Включает плагин к использованию
//
// Параметры:
//   ИмяПлагина - Строка - имя плагина для включения
//
Процедура ВключитьПлагин(Знач ИмяПлагина) Экспорт

	ИндексПлагина = ИндексПлагиновПоПриоритету[ИмяПлагина];

	Если ИндексПлагина = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Плагин = ПлагиныПоПриоритету[ИндексПлагина];
	Плагин.Включить();

КонецПроцедуры

Процедура ВключитьВсеПлагины() Экспорт
	
	Для каждого Плагин Из ПлагиныПоПриоритету Цикл
		
		Плагин.Включить();

	КонецЦикла;

КонецПроцедуры

Процедура ОтключитьВсеПлагины() Экспорт

	Для каждого Плагин Из ПлагиныПоПриоритету Цикл
		
		Плагин.Отключить();

	КонецЦикла;
	
КонецПроцедуры

// Устанавливает каталог установки и чтения плагинов
//
// Параметры:
//   ПутьККаталогу - Строка - полный путь к каталогу хранения плагинов
//
Процедура УстановитьКаталогПлагинов(Знач ПутьККаталогу) Экспорт
	КаталогПлагинов = ПутьККаталогу;
КонецПроцедуры

// Производит установку пакета плагинов из файла
//
// Параметры:
//   ПутьКФайлуПакета - Строка - полный путь к файлу пакета плагина
//
Процедура УстановитьФайлПлагин(Знач ПутьКФайлуПакета) Экспорт
	
	Установщик = Новый УстановщикПлагинов();
	Установщик.УстановитьКаталогПлагинов(КаталогПлагинов);
	Установщик.УстановитьФайлПлагина(ПутьКФайлуПакета);

КонецПроцедуры

// Производит установку пакета плагинов по имени
//
// Параметры:
//   ИмяПлагина - Строка - имя пакета плагинов на хабе
//
Процедура УстановитьПлагинПоИмени(Знач ИмяПлагина) Экспорт
	
	Установщик = Новый УстановщикПлагинов();
	Установщик.УстановитьКаталогПлагинов(КаталогПлагинов);
	Установщик.УстановитьПлагинПоИмени(ИмяПлагина);

КонецПроцедуры

// Устанавливает режим отладки для индекса плагинов
//
Процедура УстановитьРежимОтладки() Экспорт
	
	Для каждого Плагин Из ПлагиныПоПриоритету Цикл
		
		Плагин.ВключитьОтладку();

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Процедура ЗаполнитьПлагиныПоПриоритету(НовыйИндексПлагинов)

	// Сортировка плагинов в порядке приоритета и текущего порядка в индексе
	ПлагиныДляСортировки = Новый ТаблицаЗначений;
	ПлагиныДляСортировки.Колонки.Добавить("ИмяКласса");
	ПлагиныДляСортировки.Колонки.Добавить("Приоритет");
	ПлагиныДляСортировки.Колонки.Добавить("Порядок");
	ПлагиныДляСортировки.Колонки.Добавить("Плагин");

	Для Каждого ЭлементИндекса Из НовыйИндексПлагинов Цикл

		Плагин = ЭлементИндекса.Значение;
		СтрокаПриоритета = ПлагиныДляСортировки.Добавить();
		СтрокаПриоритета.ИмяКласса = ЭлементИндекса.Ключ;
		СтрокаПриоритета.Приоритет = Плагин.Приоритет();
		СтрокаПриоритета.Порядок = ПлагиныДляСортировки.Количество();
		СтрокаПриоритета.Плагин = Плагин;

	КонецЦикла;

	ПлагиныДляСортировки.Сортировать("Приоритет,Порядок");
	ПлагиныПоПриоритету = ПлагиныДляСортировки.ВыгрузитьКолонку("Плагин");

	ИндексПлагина = 0;
	ИндексПлагиновПоПриоритету = Новый Соответствие;
	Для Каждого СтрокаПлагина Из ПлагиныДляСортировки Цикл
		ИндексПлагиновПоПриоритету.Вставить(СтрокаПлагина.ИмяКласса, ИндексПлагина);
		ИндексПлагина = ИндексПлагина + 1;
	КонецЦикла;

КонецПроцедуры

Процедура ПриСозданииОбъекта(Знач ЗначениеКаталогПлагинов = Неопределено)
	
	ИндексПлагиновПоПриоритету = Новый Соответствие;
	ПлагиныПоПриоритету = Новый Массив;

	Если ЗначениеЗаполнено(ЗначениеКаталогПлагинов) Тогда
		КаталогПлагинов = ЗначениеКаталогПлагинов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
